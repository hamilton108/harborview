// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $98 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($99) {
                      return $98(Data_Either.Left.create($99));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $100 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($101) {
              return ExceptT($100(Data_Either.Right.create($101)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $110 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($111) {
              return ExceptT($110(Data_Either.Left.create($111)));
          };
      })());
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT((function () {
          var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
          return function ($3) {
              return Data_Identity.Identity(f($2($3)));
          };
      })());
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  exports["head"] = head;
  exports["last"] = last;
  exports["index"] = index;
  exports["range"] = $foreign.range;
  exports["cons"] = $foreign.cons;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  function wrap(method) {
    return function(d) {
      return function(num) {
        return method.apply(num, [d]);
      };
    };
  }

  exports.toPrecisionNative   = wrap(Number.prototype.toPrecision);
  exports.toFixedNative       = wrap(Number.prototype.toFixed);
  exports.toExponentialNative = wrap(Number.prototype.toExponential);
})(PS["Data.Number.Format"] = PS["Data.Number.Format"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Number.Format"] = $PS["Data.Number.Format"] || {};
  var exports = $PS["Data.Number.Format"];
  var $foreign = $PS["Data.Number.Format"];
  var Data_Ord = $PS["Data.Ord"];                
  var Precision = (function () {
      function Precision(value0) {
          this.value0 = value0;
      };
      Precision.create = function (value0) {
          return new Precision(value0);
      };
      return Precision;
  })();
  var Fixed = (function () {
      function Fixed(value0) {
          this.value0 = value0;
      };
      Fixed.create = function (value0) {
          return new Fixed(value0);
      };
      return Fixed;
  })();
  var Exponential = (function () {
      function Exponential(value0) {
          this.value0 = value0;
      };
      Exponential.create = function (value0) {
          return new Exponential(value0);
      };
      return Exponential;
  })();
  var toStringWith = function (v) {
      if (v instanceof Precision) {
          return $foreign.toPrecisionNative(v.value0);
      };
      if (v instanceof Fixed) {
          return $foreign.toFixedNative(v.value0);
      };
      if (v instanceof Exponential) {
          return $foreign.toExponentialNative(v.value0);
      };
      throw new Error("Failed pattern match at Data.Number.Format (line 59, column 1 - line 59, column 40): " + [ v.constructor.name ]);
  };   
  var fixed = (function () {
      var $7 = Data_Ord.clamp(Data_Ord.ordInt)(0)(20);
      return function ($8) {
          return Fixed.create($7($8));
      };
  })();
  exports["fixed"] = fixed;
  exports["toStringWith"] = toStringWith;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                                        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [ v.constructor.name ]);
  });
  var readNull = function (value) {
      if ($foreign.isNull(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Foreign (line 152, column 1 - line 152, column 41): " + [ value.constructor.name ]);
  };
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };                                            
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = (function () {
          var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
          return function ($110) {
              return $109(Data_Int.fromNumber($110));
          };
      })();
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["readNull"] = readNull;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];                
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp; 
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableExceptT = new Indexable(function (dictIndex) {
      return function (f) {
          return function (i) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
          };
      };
  });
  var indexableForeign = new Indexable(function (dictIndex) {
      return index(dictIndex);
  });
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                        
  var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["readProp"] = readProp;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
  exports["indexableForeign"] = indexableForeign;
  exports["indexableExceptT"] = indexableExceptT;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["clearRect"] = $foreign.clearRect;
})(PS);
(function(exports) {
  "use strict";

  exports.fi_paint = function (xaxis) {
    return function (candlestix) {
      return function (ctx) {
        return function () {
          console.log(candlestix);
          ctx.strokeStyle = "#000000";
          ctx.fillStyle = "#ffaa00";
          ctx.lineWidth = 0.5;
          const numCandlestix = candlestix.length;
          for (var i = 0; i < numCandlestix; ++i) {
            paintCandlestick(xaxis[i], candlestix[i], ctx);
          }
        }
      }
    }
  }

  const paintCandlestick = function (x, cndl, ctx) {
    const x0 = x - 4;
    ctx.beginPath();

    if (cndl.c > cndl.o) {
      // Bearish
      ctx.moveTo(x, cndl.h);
      ctx.lineTo(x, cndl.o);
      ctx.moveTo(x, cndl.c);
      ctx.lineTo(x, cndl.l);
      const cndlHeight = cndl.c - cndl.o;
      ctx.rect(x0, cndl.o, 8, cndlHeight);
      ctx.fillRect(x0, cndl.o, 8, cndlHeight);
    }
    else {
      // Bullish
      var cndlHeight = cndl.o - cndl.c;
      // If doji
      if (cndlHeight === 0.0) {
        cndlHeight = 1.0;
        const x1 = x + 4;
        ctx.moveTo(x, cndl.h);
        ctx.lineTo(x, cndl.l);
        ctx.moveTo(x0, cndl.c);
        ctx.lineTo(x1, cndl.c);
      }
      else {
        ctx.moveTo(x, cndl.h);
        ctx.lineTo(x, cndl.c);
        ctx.moveTo(x, cndl.o);
        ctx.lineTo(x, cndl.l);
        ctx.rect(x0, cndl.c, 8, cndlHeight);
      }
    }
    ctx.stroke();
  }
})(PS["Maunaloa.Candlestick"] = PS["Maunaloa.Candlestick"] || {});
(function(exports) {
  "use strict";

  exports.fi_lines = function (ctx) {
	  return function (boundary) {
		  return function (lines) {
			  return function () {
				  const x1 = boundary.p1;
				  const x2 = boundary.p2;
				  ctx.strokeStyle = "#000000";
				  ctx.fillStyle = "#000000";
				  ctx.lineWidth = 0.25;
				  ctx.beginPath();
				  for (var i = 0; i < lines.length; ++i) {
					  const y = lines[i].p0;
					  ctx.moveTo(x1, y);
					  ctx.lineTo(x2, y);
					  ctx.fillText(lines[i].tx, x1 + 5, y + 15);
				  }
				  ctx.stroke();
			  }
		  }
	  }
  }
})(PS["Maunaloa.VRuler"] = PS["Maunaloa.VRuler"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.Common"] = $PS["Maunaloa.Common"] || {};
  var exports = $PS["Maunaloa.Common"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var UnixTime = function (x) {
      return x;
  };
  var Pix = function (x) {
      return x;
  }; 
  var eqUnixTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordUnixTime = new Data_Ord.Ord(function () {
      return eqUnixTime;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordNumber)(v)(v1);
      };
  });
  var calcPpy = function (v) {
      return function (v1) {
          return function (v2) {
              var padding_justified_h = v - v2.top - v2.bottom;
              return padding_justified_h / (v1.maxVal - v1.minVal);
          };
      };
  };
  var calcPpx = function (v) {
      return function (v1) {
          return function (v2) {
              var padding_w = v - v2.left - v2.right;
              var diffDays = Data_Int.toNumber((v1.oHead - v1.oLast | 0) + 1 | 0);
              return padding_w / diffDays;
          };
      };
  };
  exports["Pix"] = Pix;
  exports["UnixTime"] = UnixTime;
  exports["calcPpx"] = calcPpx;
  exports["calcPpy"] = calcPpy;
  exports["eqUnixTime"] = eqUnixTime;
  exports["ordUnixTime"] = ordUnixTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.VRuler"] = $PS["Maunaloa.VRuler"] || {};
  var exports = $PS["Maunaloa.VRuler"];
  var $foreign = $PS["Maunaloa.VRuler"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Number_Format = $PS["Data.Number.Format"];
  var Maunaloa_Common = $PS["Maunaloa.Common"];
  var valueToPix = function (v) {
      return function (value) {
          return (v.maxVal - value) * v.ppy + v.padding.top;
      };
  };
  var pixToValue = function (v) {
      return function (v1) {
          return v.maxVal - (v1 - v.padding.top) / v.ppy;
      };
  }; 
  var createLine = function (vruler) {
      return function (vpix) {
          return function (padTop) {
              return function (n) {
                  var curPix = padTop + vpix * Data_Int.toNumber(n);
                  var val = pixToValue(vruler)(curPix);
                  var tx = Data_Number_Format.toStringWith(Data_Number_Format.fixed(2))(val);
                  return {
                      p0: curPix,
                      tx: tx
                  };
              };
          };
      };
  };
  var lines = function (v) {
      return function (num) {
          var vpix = (v.h - v.padding.top - v.padding.bottom) / Data_Int.toNumber(num);
          var sections = Data_Array.range(0)(num);
          return Data_Functor.map(Data_Functor.functorArray)(createLine(v)(vpix)(v.padding.top))(sections);
      };
  };
  var paint = function (v) {
      return function (ctx) {
          var curLines = lines(v)(4);
          var linesX = {
              p1: 0.0,
              p2: v.w
          };
          return $foreign.fi_lines(ctx)(linesX)(curLines);
      };
  };
  var create = function (v) {
      return function (w) {
          return function (h) {
              return function (pad) {
                  return {
                      ppy: Maunaloa_Common.Pix(Maunaloa_Common.calcPpy(h)(v)(pad)),
                      maxVal: v.maxVal,
                      w: w,
                      h: h,
                      padding: pad
                  };
              };
          };
      };
  };
  exports["paint"] = paint;
  exports["createLine"] = createLine;
  exports["lines"] = lines;
  exports["create"] = create;
  exports["valueToPix"] = valueToPix;
  exports["pixToValue"] = pixToValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.Candlestick"] = $PS["Maunaloa.Candlestick"] || {};
  var exports = $PS["Maunaloa.Candlestick"];
  var $foreign = $PS["Maunaloa.Candlestick"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Maunaloa_VRuler = $PS["Maunaloa.VRuler"];
  var readCandlestick = function (value) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("o"))(Foreign.readNumber))(function (opn) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("h"))(Foreign.readNumber))(function (hi) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("l"))(Foreign.readNumber))(function (lo) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("c"))(Foreign.readNumber))(function (cls) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                          o: opn,
                          h: hi,
                          l: lo,
                          c: cls
                      });
                  });
              });
          });
      });
  };
  var readCandlesticks = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))([  ]);
      };
      if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readCandlestick));
      };
      throw new Error("Failed pattern match at Maunaloa.Candlestick (line 53, column 1 - line 53, column 52): " + [ v.constructor.name ]);
  };
  var paint = function (v) {
      return function (cndls) {
          return function (ctx) {
              return $foreign.fi_paint(v.xaxis)(cndls)(ctx);
          };
      };
  }; 
  var candleToPix = function (vr) {
      return function (v) {
          var po = Maunaloa_VRuler.valueToPix(vr)(v.o);
          var pl = Maunaloa_VRuler.valueToPix(vr)(v.l);
          var ph = Maunaloa_VRuler.valueToPix(vr)(v.h);
          var pc = Maunaloa_VRuler.valueToPix(vr)(v.c);
          return {
              o: po,
              h: ph,
              l: pl,
              c: pc
          };
      };
  };
  exports["candleToPix"] = candleToPix;
  exports["readCandlestick"] = readCandlestick;
  exports["readCandlesticks"] = readCandlesticks;
  exports["paint"] = paint;
})(PS);
(function(exports) {
  "use strict";

  exports.fi_incMonths = function (startTime) {
	  return function (numMonths) {
		  var stm = new Date(startTime);
		  return Date.UTC(stm.getFullYear(), stm.getMonth() + numMonths, 1);
	  }
  }

  exports.fi_incDays = function (startTime) {
	  return function (offset) {
		  var stm = new Date(startTime);
		  return Date.UTC(stm.getFullYear(), stm.getMonth(), stm.getDate() + offset);
	  }
  }

  exports.fi_dateToString = function (tm) {
	  var d = new Date(tm);
	  var m = d.getMonth() + 1;
	  if (m < 10) {
		  return "0" + m + "." + d.getFullYear();
	  }
	  else {
		  return m + "." + d.getFullYear();
	  }
  }

  exports.fi_lines = function (ctx) {
	  return function (boundary) {
		  return function (lines) {
			  return function () {
				  const y1 = boundary.p1;
				  const y2 = boundary.p2;
				  ctx.strokeStyle = "#000000";
				  ctx.fillStyle = "#000000";
				  ctx.lineWidth = 0.25;
				  ctx.beginPath();
				  for (var i = 0; i < lines.length; ++i) {
					  const x = lines[i].p0;
					  ctx.moveTo(x, y1);
					  ctx.lineTo(x, y2);
					  ctx.fillText(lines[i].tx, x + 5, y1 + 15);
				  }
				  ctx.stroke();
			  }
		  }
	  }
  }

  exports.fi_startOfNextMonth = function (tm) {
	  const curDate = new Date(tm);
	  return Date.UTC(curDate.getFullYear(), curDate.getMonth() + 1, 1);
  }
})(PS["Maunaloa.HRuler"] = PS["Maunaloa.HRuler"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.HRuler"] = $PS["Maunaloa.HRuler"] || {};
  var exports = $PS["Maunaloa.HRuler"];
  var $foreign = $PS["Maunaloa.HRuler"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Maunaloa_Common = $PS["Maunaloa.Common"];
  var startOfNextMonth = function (v) {
      return Maunaloa_Common.UnixTime($foreign.fi_startOfNextMonth(v));
  };
  var offsetsToPix = function (startOffset) {
      return function (offsets) {
          return function (v) {
              return function (padLeft) {
                  return Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return padLeft + Data_Int.toNumber(x - startOffset | 0) * v;
                  })(offsets);
              };
          };
      };
  };
  var incMonths = function (v) {
      return function (numMonths) {
          return Maunaloa_Common.UnixTime($foreign.fi_incMonths(v)(numMonths));
      };
  };
  var incDays = function (v) {
      return function (offset) {
          return Maunaloa_Common.UnixTime($foreign.fi_incDays(v)(offset));
      };
  }; 
  var dayInMillis = 8.64e7;
  var timeStampToPix = function (v) {
      return function (v1) {
          var days = (v1 - v.startTime) / dayInMillis;
          return v.padding.left + days * v.ppx;
      };
  };
  var dateToString = function (v) {
      return $foreign.fi_dateToString(v);
  };
  var lines_ = function ($copy_timestampFn) {
      return function ($copy_endTime) {
          return function ($copy_numMonths) {
              return function ($copy_curLines) {
                  return function ($copy_curTime) {
                      var $tco_var_timestampFn = $copy_timestampFn;
                      var $tco_var_endTime = $copy_endTime;
                      var $tco_var_numMonths = $copy_numMonths;
                      var $tco_var_curLines = $copy_curLines;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(timestampFn, endTime, numMonths, curLines, curTime) {
                          if (Data_Ord.greaterThanOrEq(Maunaloa_Common.ordUnixTime)(curTime)(endTime)) {
                              $tco_done = true;
                              return curLines;
                          };
                          if (Data_Boolean.otherwise) {
                              var nextTime = incMonths(curTime)(numMonths);
                              var newCurLines = Data_Array.cons({
                                  p0: timestampFn(curTime),
                                  tx: dateToString(curTime)
                              })(curLines);
                              $tco_var_timestampFn = timestampFn;
                              $tco_var_endTime = endTime;
                              $tco_var_numMonths = numMonths;
                              $tco_var_curLines = newCurLines;
                              $copy_curTime = nextTime;
                              return;
                          };
                          throw new Error("Failed pattern match at Maunaloa.HRuler (line 65, column 1 - line 65, column 108): " + [ timestampFn.constructor.name, endTime.constructor.name, numMonths.constructor.name, curLines.constructor.name, curTime.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_timestampFn, $tco_var_endTime, $tco_var_numMonths, $tco_var_curLines, $copy_curTime);
                      };
                      return $tco_result;
                  };
              };
          };
      };
  };
  var lines = function (v) {
      return function (num) {
          var timestampFn = timeStampToPix(v);
          var snm = startOfNextMonth(v.startTime);
          return lines_(timestampFn)(v.endTime)(v.myIncMonths)([  ])(snm);
      };
  };
  var paint = function (hruler) {
      return function (v) {
          return function (ctx) {
              var curLines = lines(hruler)(4);
              var linesX = {
                  p1: 0.0,
                  p2: v
              };
              return $foreign.fi_lines(ctx)(linesX)(curLines);
          };
      };
  };
  var create = function (w) {
      return function (startTime) {
          return function (offsets) {
              return function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(offsets))(function (offset0) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(offsets))(function (offsetN) {
                          var offsetBoundary = {
                              oHead: offset0,
                              oLast: offsetN
                          };
                          var pix = Maunaloa_Common.calcPpx(w)(offsetBoundary)(v);
                          var endTime = incDays(startTime)(offset0);
                          return Data_Maybe.Just.create({
                              startTime: startTime,
                              endTime: endTime,
                              xaxis: offsetsToPix(offsetN)(offsets)(pix)(v.left),
                              ppx: pix,
                              padding: v,
                              myIncMonths: 1
                          });
                      });
                  });
              };
          };
      };
  };
  exports["paint"] = paint;
  exports["lines_"] = lines_;
  exports["lines"] = lines;
  exports["dayInMillis"] = dayInMillis;
  exports["create"] = create;
  exports["timeStampToPix"] = timeStampToPix;
  exports["offsetsToPix"] = offsetsToPix;
  exports["incMonths"] = incMonths;
  exports["incDays"] = incDays;
  exports["startOfNextMonth"] = startOfNextMonth;
  exports["dateToString"] = dateToString;
})(PS);
(function(exports) {
  "use strict";

  exports.fi_paint = function (lines) {
	  return function (ctx) {
		  return function () {
			  for (var i = 0; i < lines.length; ++i) {
				  paintLine(ctx, lines[i]);
			  }
		  }
	  }
  };

  const paintLine = function (ctx, line) {
	  ctx.strokeStyle = line.strokeStyle;
	  ctx.lineWidth = 0.5;
	  ctx.beginPath();
	  const y = line.yaxis;
	  const x = line.xaxis;
	  ctx.moveTo(x[0], y[0]);
	  for (var i = 1; i < x.length; ++i) {
		  ctx.lineTo(x[i], y[i]);
	  }
	  ctx.stroke();
  };
})(PS["Maunaloa.Line"] = PS["Maunaloa.Line"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Util.Foreign"] = $PS["Util.Foreign"] || {};
  var exports = $PS["Util.Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Foreign = $PS["Foreign"];                
  var readNumArray = function (value) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(value))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readNumber)))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
  };
  var readIntArray = function (value) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(value))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readInt)))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
  };
  var logErrors = function (errs) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableNonEmptyList)(Effect_Console.logShow(Foreign.showForeignError))(errs);
  };
  exports["readNumArray"] = readNumArray;
  exports["readIntArray"] = readIntArray;
  exports["logErrors"] = logErrors;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.Line"] = $PS["Maunaloa.Line"] || {};
  var exports = $PS["Maunaloa.Line"];
  var $foreign = $PS["Maunaloa.Line"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Foreign = $PS["Foreign"];
  var Maunaloa_VRuler = $PS["Maunaloa.VRuler"];
  var Util_Foreign = $PS["Util.Foreign"];
  var strokes = [ "#ff0000", "#aa00ff" ];
  var lines = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))([  ]);
      };
      if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Util_Foreign.readNumArray));
      };
      throw new Error("Failed pattern match at Maunaloa.Line (line 24, column 1 - line 24, column 34): " + [ v.constructor.name ]);
  };
  var lineToPix = function (vr) {
      return function (line) {
          var vfun = Maunaloa_VRuler.valueToPix(vr);
          return Data_Functor.map(Data_Functor.functorArray)(vfun)(line);
      };
  };
  var createJsLine = function (xaxis) {
      return function (line) {
          return function (strokeStyle) {
              return {
                  xaxis: xaxis,
                  yaxis: line,
                  strokeStyle: strokeStyle
              };
          };
      };
  };
  var paint = function (v) {
      return function (lx) {
          return function (ctx) {
              var fn = createJsLine(v.xaxis);
              var jsLines = Data_Array.zipWith(fn)(lx)(strokes);
              return $foreign.fi_paint(jsLines)(ctx);
          };
      };
  };
  exports["lines"] = lines;
  exports["lineToPix"] = lineToPix;
  exports["strokes"] = strokes;
  exports["createJsLine"] = createJsLine;
  exports["paint"] = paint;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.Chart"] = $PS["Maunaloa.Chart"] || {};
  var exports = $PS["Maunaloa.Chart"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Maunaloa_Candlestick = $PS["Maunaloa.Candlestick"];
  var Maunaloa_HRuler = $PS["Maunaloa.HRuler"];
  var Maunaloa_Line = $PS["Maunaloa.Line"];
  var Maunaloa_VRuler = $PS["Maunaloa.VRuler"];
  var Util_Foreign = $PS["Util.Foreign"];
  var valueRangeFor = function (v) {
      if (v.length === 2) {
          return {
              minVal: v[0],
              maxVal: v[1]
          };
      };
      return {
          minVal: 0.0,
          maxVal: 0.0
      };
  };
  var toRectangle = function (v) {
      return {
          x: 0.0,
          y: 0.0,
          width: v.w,
          height: v.h
      };
  }; 
  var readValueRange = function (cidValue) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(cidValue)("valueRange"))(Util_Foreign.readNumArray);
  };
  var readLines = function (cidValue) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(cidValue)("lines"))(Foreign.readNull))(Maunaloa_Line.lines);
  };
  var readCandlesticks = function (cidValue) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(cidValue)("candlesticks"))(Foreign.readNull))(Maunaloa_Candlestick.readCandlesticks);
  };
  var paint = function (hruler) {
      return function (v) {
          return function __do() {
              var canvas = Graphics_Canvas.getCanvasElementById(v.canvasId)();
              if (canvas instanceof Data_Maybe.Nothing) {
                  return Effect_Console.logShow(Data_Show.showString)("CanvasId " + (v.canvasId + " does not exist!"))();
              };
              if (canvas instanceof Data_Maybe.Just) {
                  var ctx = Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.logShow(Data_Show.showString)("Drawing canvas: " + v.canvasId))(Graphics_Canvas.getContext2D(canvas.value0))();
                  var r = toRectangle(v);
                  return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Graphics_Canvas.clearRect(ctx)(r))(Maunaloa_VRuler.paint(v.vruler)(ctx)))(Maunaloa_HRuler.paint(hruler)(v.vruler.h)(ctx)))(Maunaloa_Line.paint(hruler)(v.lines)(ctx)))(Maunaloa_Candlestick.paint(hruler)(v.candlesticks)(ctx))();
              };
              throw new Error("Failed pattern match at Maunaloa.Chart (line 118, column 3 - line 131, column 43): " + [ canvas.constructor.name ]);
          };
      };
  };
  var padding = {
      left: 50.0,
      top: 0.0,
      right: 50.0,
      bottom: 0.0
  };
  var readHRuler = function (chartWidth) {
      return function (value) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("startdate"))(Foreign.readNumber))(function (sd) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)("xaxis"))(Util_Foreign.readIntArray))(function (x) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Maunaloa_HRuler.create(chartWidth)(sd)(x)(padding));
              });
          });
      };
  };
  var vruler = function (vr) {
      return function (w) {
          return function (h) {
              return Maunaloa_VRuler.create(vr)(w)(h)(padding);
          };
      };
  };
  var readChart = function (v) {
      return function (caId) {
          return function (w) {
              return function (h) {
                  return function (value) {
                      return function (levelCaId) {
                          var cidValue = Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(value)(v);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readLines(cidValue))(function (l1) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readCandlesticks(cidValue))(function (c1) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readValueRange(cidValue))(function (v1) {
                                      var valueRange = valueRangeFor(v1);
                                      var curVruler = vruler(valueRange)(w)(h);
                                      var linesToPix = Data_Functor.map(Data_Functor.functorArray)(Maunaloa_Line.lineToPix(curVruler))(l1);
                                      var cndlToPix = Data_Functor.map(Data_Functor.functorArray)(Maunaloa_Candlestick.candleToPix(curVruler))(c1);
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                                          lines: linesToPix,
                                          candlesticks: cndlToPix,
                                          canvasId: caId,
                                          vruler: curVruler,
                                          w: w,
                                          h: h,
                                          levelCanvasId: levelCaId
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  exports["padding"] = padding;
  exports["vruler"] = vruler;
  exports["valueRangeFor"] = valueRangeFor;
  exports["readLines"] = readLines;
  exports["readCandlesticks"] = readCandlesticks;
  exports["readValueRange"] = readValueRange;
  exports["readChart"] = readChart;
  exports["readHRuler"] = readHRuler;
  exports["toRectangle"] = toRectangle;
  exports["paint"] = paint;
})(PS);
(function(exports) {
  "use strict";

  exports.createLine = function (evt) {
      return function () {
          console.log(evt);
          return { y: evt.offsetY, draggable: true};
      };
  };
})(PS["Maunaloa.LevelLine"] = PS["Maunaloa.LevelLine"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };

  exports.stopPropagation = function (e) {
    return function () {
      return e.stopPropagation();
    };
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  exports["stopPropagation"] = $foreign.stopPropagation;
  exports["preventDefault"] = $foreign.preventDefault;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];     
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.LevelLine"] = $PS["Maunaloa.LevelLine"] || {};
  var exports = $PS["Maunaloa.LevelLine"];
  var $foreign = $PS["Maunaloa.LevelLine"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Lines = function (x) {
      return x;
  };
  var unlisten = function (target) {
      return function (v) {
          return Web_Event_EventTarget.removeEventListener(v.eventType)(v.listener)(false)(Web_DOM_Element.toEventTarget(target));
      };
  };
  var unlistener = function (target) {
      return function (elr) {
          return function (dummy) {
              var unlisten1 = unlisten(target);
              return function __do() {
                  var elrx = Effect_Ref.read(elr)();
                  return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(unlisten1)(elrx)();
              };
          };
      };
  }; 
  var initLines = {
      lines: Data_List_Types.Nil.value,
      selected: Data_Maybe.Nothing.value
  };
  var linesRef = Effect_Ref["new"](initLines);
  var getDoc = function __do() {
      var win = Web_HTML.window();
      var doc = Web_HTML_Window.document(win)();
      return Web_HTML_HTMLDocument.toNonElementParentNode(doc);
  };
  var eventListenerRef = Effect_Ref["new"](Data_List_Types.Nil.value);
  var defaultEventHandling = function (event) {
      return Control_Apply.applySecond(Effect.applyEffect)(Web_Event_Event.stopPropagation(event))(Web_Event_Event.preventDefault(event));
  };
  var addLine_ = function (newLine) {
      return function (v) {
          return Lines({
              lines: new Data_List_Types.Cons(newLine, v.lines),
              selected: v.selected
          });
      };
  };
  var addLine = function (lref) {
      return function (event) {
          return function __do() {
              var newLine = $foreign.createLine(event)();
              return Effect_Ref.modify_(addLine_(newLine))(lref)();
          };
      };
  };
  var mouseEventAddLine = function (lref) {
      return function (event) {
          return Control_Apply.applySecond(Effect.applyEffect)(defaultEventHandling(event))(addLine(lref)(event));
      };
  };
  var addEventListenerRef = function (lref) {
      return function (listener) {
          return Effect_Ref.modify_(function (listeners) {
              return new Data_List_Types.Cons(listener, listeners);
          })(lref);
      };
  };
  var initMouseEvents = function (target) {
      return function (elr) {
          return function __do() {
              var lir = linesRef();
              var me1 = Web_Event_EventTarget.eventListener(mouseEventAddLine(lir))();
              var info = {
                  listener: me1,
                  eventType: "mouseup"
              };
              return Control_Apply.applySecond(Effect.applyEffect)(Web_Event_EventTarget.addEventListener("mouseup")(me1)(false)(Web_DOM_Element.toEventTarget(target)))(addEventListenerRef(elr)(info))();
          };
      };
  };
  var initEvents = function __do() {
      var doc = Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.logShow(Data_Show.showString)("initEvents"))(getDoc)();
      var target = Web_DOM_NonElementParentNode.getElementById("levellines-1")(doc)();
      if (target instanceof Data_Maybe.Nothing) {
          return function (t) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
      if (target instanceof Data_Maybe.Just) {
          var elr = eventListenerRef();
          return Control_Apply.applySecond(Effect.applyEffect)(initMouseEvents(target.value0)(elr))(Control_Applicative.pure(Effect.applicativeEffect)(unlistener(target.value0)(elr)))();
      };
      throw new Error("Failed pattern match at Maunaloa.LevelLine (line 127, column 13 - line 133, column 58): " + [ target.constructor.name ]);
  };
  exports["initEvents"] = initEvents;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Maunaloa.ChartCollection"] = $PS["Maunaloa.ChartCollection"] || {};
  var exports = $PS["Maunaloa.ChartCollection"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Maunaloa_Chart = $PS["Maunaloa.Chart"];
  var Maunaloa_LevelLine = $PS["Maunaloa.LevelLine"];
  var levelLines = function (charts) {
      return Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.logShow(Data_Show.showString)("levelLines"))(Maunaloa_LevelLine.initEvents);
  };
  var paint = function (v) {
      var paint_ = Maunaloa_Chart.paint(v.hruler);
      return Control_Apply.applySecond(Effect.applyEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(paint_)(v.charts))(levelLines(v.charts));
  };
  var globalChartWidth = 1310.0;
  var fromMappings = function (mappings) {
      return function (value) {
          var tfn = function (v) {
              return Maunaloa_Chart.readChart(v.chartId)(v.canvasId)(globalChartWidth)(v.chartHeight)(value)(Data_Maybe.Nothing.value);
          };
          return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(tfn)(mappings);
      };
  };
  var readChartCollection = function (mappings) {
      return function (value) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(fromMappings(mappings)(value))(function (charts) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Maunaloa_Chart.readHRuler(globalChartWidth)(value))(function (mhr) {
                  var hr = Data_Maybe.fromJust()(mhr);
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      charts: charts,
                      hruler: hr
                  });
              });
          });
      };
  };
  exports["globalChartWidth"] = globalChartWidth;
  exports["fromMappings"] = fromMappings;
  exports["readChartCollection"] = readChartCollection;
  exports["levelLines"] = levelLines;
  exports["paint"] = paint;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Either = $PS["Data.Either"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Maunaloa_ChartCollection = $PS["Maunaloa.ChartCollection"];
  var Util_Foreign = $PS["Util.Foreign"];                
  var paint = function (mappings) {
      return function (value) {
          var coll = Control_Monad_Except.runExcept(Maunaloa_ChartCollection.readChartCollection(mappings)(value));
          if (coll instanceof Data_Either.Right) {
              return Maunaloa_ChartCollection.paint(coll.value0);
          };
          if (coll instanceof Data_Either.Left) {
              return Control_Apply.applySecond(Effect.applyEffect)(Util_Foreign.logErrors(coll.value0))(Control_Applicative.pure(Effect.applicativeEffect)(function (t) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              }));
          };
          throw new Error("Failed pattern match at Main (line 43, column 3 - line 48, column 31): " + [ coll.constructor.name ]);
      };
  };
  exports["paint"] = paint;
})(PS);